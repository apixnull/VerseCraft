@model VerseCraft.Models.Poem

@{
    ViewData["Title"] = "Poem Details";
}

<div class="poem-details-view">
    <div class="page-header">
        <h2 class="page-title">Poem Details</h2>
        <div class="breadcrumb-wrapper">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/admin">Dashboard</a></li>
                    <li class="breadcrumb-item"><a href="/admin/poems">Poems</a></li>
                    <li class="breadcrumb-item active">View Poem</li>
                </ol>
            </nav>
        </div>
    </div>

    <div class="content-card poem-showcase">
        <div class="poem-actions">
            <div class="btn-group">
                <a asp-action="EditPoem" asp-route-id="@Model.Id" class="action-btn edit-btn">
                    <i class="bi bi-pencil-square"></i> Edit Poem
                </a>
                <button type="button" class="action-btn delete-btn" data-bs-toggle="modal" data-bs-target="#deleteModal">
                    <i class="bi bi-trash"></i> Delete
                </button>
                <a asp-action="DisplayPoems" class="action-btn back-btn">
                    <i class="bi bi-arrow-left"></i> Back to List
                </a>
            </div>

            <div class="visibility-badge @(Model.IsPublic ? "public" : "private")">
                <i class="bi @(Model.IsPublic ? "bi-eye" : "bi-eye-slash")"></i>
                <span>@(Model.IsPublic ? "Public" : "Private")</span>
            </div>
        </div>

        <div class="poem-container">
            <div class="poem-header">
                <div class="cover-section">
                    @if (!string.IsNullOrEmpty(Model.CoverImagePath))
                    {
                        <div class="poem-cover">
                            <img src="~/uploads/poems/@Model.CoverImagePath" alt="Cover Image" />
                        </div>
                    }
                    else
                    {
                        <div class="poem-cover empty-cover">
                            <div class="empty-cover-inner">
                                <i class="bi bi-image"></i>
                                <p>No Cover Image</p>
                            </div>
                        </div>
                    }
                </div>

                <div class="title-section">
                    <h1 class="poem-title">@Model.Title</h1>
                    <div class="poem-author">
                        <div class="author-avatar">
                            <i class="bi bi-person-circle"></i>
                        </div>
                        <div class="author-info">
                            <span class="author-name">@Model.AuthorName</span>
                            <span class="author-date">
                                <i class="bi bi-calendar3"></i> @Model.CreatedAt.ToString("MMMM dd, yyyy")
                                @if (Model.UpdatedAt.HasValue && Model.UpdatedAt.Value != Model.CreatedAt)
                                {
                                    <span class="updated-date">
                                        (Updated: @Model.UpdatedAt.Value.ToString("MMM dd, yyyy"))
                                    </span>
                                }
                            </span>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(Model.Summary))
                    {
                        <div class="poem-summary">
                            <p>@Model.Summary</p>
                        </div>
                    }
                </div>
            </div>

            <div class="poem-content-wrapper">
                <div class="poem-meta-tags">
                    @if (!string.IsNullOrEmpty(Model.Genre))
                    {
                        <div class="meta-tag genre">
                            <i class="bi bi-bookmark"></i>
                            <span>@Model.Genre</span>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(Model.Style))
                    {
                        <div class="meta-tag style">
                            <i class="bi bi-brush"></i>
                            <span>@Model.Style</span>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(Model.Theme))
                    {
                        <div class="meta-tag theme">
                            <i class="bi bi-lightbulb"></i>
                            <span>@Model.Theme</span>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(Model.Mood))
                    {
                        <div class="meta-tag mood">
                            <i class="bi bi-emoji-smile"></i>
                            <span>@Model.Mood</span>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(Model.Language))
                    {
                        <div class="meta-tag language">
                            <i class="bi bi-globe2"></i>
                            <span>@Model.Language</span>
                        </div>
                    }
                </div>

                <div class="poem-content">
                    <pre>@Model.Content</pre>
                </div>

                @if (!string.IsNullOrEmpty(Model.Tags))
                {
                    <div class="poem-tags">
                        @foreach (var tag in Model.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries))
                        {
                            <span class="tag">@tag.Trim()</span>
                        }
                    </div>
                }
            </div>

            <div class="poem-footer">
                @if (!string.IsNullOrEmpty(Model.LicenseType) || !string.IsNullOrEmpty(Model.CopyrightNotice))
                {
                    <div class="copyright-section">
                        @if (!string.IsNullOrEmpty(Model.LicenseType))
                        {
                            <div class="license">
                                <i class="bi bi-shield-check"></i>
                                <span>@Model.LicenseType</span>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(Model.CopyrightNotice))
                        {
                            <div class="copyright-notice">
                                @Model.CopyrightNotice
                            </div>
                        }
                    </div>
                }

                <div class="poem-stats">
                    <div class="stat">
                        <i class="bi bi-eye"></i>
                        <span>286 Views</span>
                    </div>
                    <div class="stat">
                        <i class="bi bi-heart"></i>
                        <span>54 Likes</span>
                    </div>
                    <div class="stat">
                        <i class="bi bi-chat-dots"></i>
                        <span>18 Comments</span>
                    </div>
                    <div class="stat">
                        <i class="bi bi-share"></i>
                        <span>12 Shares</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="delete-warning">
                    <i class="bi bi-exclamation-triangle-fill"></i>
                    <p>Are you sure you want to delete "<strong>@Model.Title</strong>"?</p>
                    <p class="text-danger">This action cannot be undone.</p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form asp-action="DeletePoem" asp-route-id="@Model.Id" method="post">
                    <button type="submit" class="btn btn-danger">Delete Permanently</button>
                </form>
            </div>
        </div>
    </div>
</div>

<style>
    .poem-details-view {
        padding-bottom: 30px;
    }

    /* Action Buttons */
    .poem-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
        flex-wrap: wrap;
        gap: 15px;
    }

    .btn-group {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }

    .action-btn {
        display: flex;
        align-items: center;
        padding: 10px 20px;
        border-radius: 8px;
        font-weight: 500;
        text-decoration: none;
        cursor: pointer;
        transition: var(--transition);
    }

        .action-btn i {
            margin-right: 8px;
            font-size: 18px;
        }

    .edit-btn {
        background: linear-gradient(135deg, rgba(248,187,208,0.2) 0%, rgba(187,222,251,0.2) 100%);
        color: var(--text-primary);
        border: 1px solid rgba(187,222,251,0.5);
    }

        .edit-btn:hover {
            background: var(--primary-gradient);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(248, 187, 208, 0.3);
        }

    .delete-btn {
        background-color: rgba(220, 53, 69, 0.1);
        color: #dc3545;
        border: 1px solid rgba(220, 53, 69, 0.2);
    }

        .delete-btn:hover {
            background-color: #dc3545;
            color: white;
        }

    .back-btn {
        background-color: #f0f4f8;
        color: var(--text-secondary);
        border: 1px solid rgba(0,0,0,0.05);
    }

        .back-btn:hover {
            background-color: #e1e7ef;
            color: var(--text-primary);
        }

    /* Visibility Badge */
    .visibility-badge {
        display: flex;
        align-items: center;
        padding: 8px 15px;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 500;
    }

        .visibility-badge i {
            margin-right: 6px;
        }

        .visibility-badge.public {
            background-color: rgba(40, 167, 69, 0.1);
            color: #28a745;
            border: 1px solid rgba(40, 167, 69, 0.2);
        }

        .visibility-badge.private {
            background-color: rgba(108, 117, 125, 0.1);
            color: #6c757d;
            border: 1px solid rgba(108, 117, 125, 0.2);
        }

    /* Poem Container */
    .poem-container {
        border-radius: var(--border-radius);
        overflow: hidden;
        background-color: white;
    }

    /* Poem Header */
    .poem-header {
        display: flex;
        flex-direction: row;
        gap: 30px;
        padding: 30px;
        border-bottom: 1px solid rgba(0,0,0,0.05);
    }

    .cover-section {
        flex: 0 0 250px;
    }

    .poem-cover {
        width: 100%;
        height: 320px;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: var(--box-shadow);
    }

        .poem-cover img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.5s ease;
        }

            .poem-cover img:hover {
                transform: scale(1.05);
            }

    .empty-cover {
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, rgba(248,187,208,0.1) 0%, rgba(187,222,251,0.1) 100%);
        border: 2px dashed rgba(187,222,251,0.5);
    }

    .empty-cover-inner {
        text-align: center;
        color: var(--text-secondary);
    }

        .empty-cover-inner i {
            font-size: 48px;
            margin-bottom: 10px;
            opacity: 0.7;
        }

        .empty-cover-inner p {
            margin: 0;
            font-size: 14px;
        }

    .title-section {
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .poem-title {
        font-size: 32px;
        font-weight: 700;
        margin-bottom: 20px;
        background: var(--primary-gradient);
        -webkit-background-clip: text;
        background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    .poem-author {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-bottom: 20px;
    }

    .author-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: var(--primary-gradient);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 24px;
    }

    .author-info {
        display: flex;
        flex-direction: column;
    }

    .author-name {
        font-weight: 600;
        font-size: 18px;
        margin-bottom: 3px;
    }

    .author-date {
        font-size: 14px;
        color: var(--text-secondary);
    }

    .updated-date {
        font-style: italic;
        margin-left: 5px;
    }

    .poem-summary {
        margin-top: 20px;
        padding: 15px;
        background-color: rgba(248,249,250,0.5);
        border-left: 3px solid var(--pink-light);
        border-radius: 0 8px 8px 0;
        font-style: italic;
        color: var(--text-secondary);
    }

        .poem-summary p {
            margin: 0;
            line-height: 1.6;
        }

    /* Poem Content */
    .poem-content-wrapper {
        padding: 30px;
        background-color: #ffffff;
    }

    .poem-meta-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 25px;
    }

    .meta-tag {
        display: flex;
        align-items: center;
        padding: 8px 15px;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 500;
        background: linear-gradient(135deg, rgba(248,187,208,0.15) 0%, rgba(187,222,251,0.15) 100%);
        color: var(--text-primary);
    }

        .meta-tag i {
            margin-right: 6px;
            font-size: 16px;
            color: var(--pink-light);
        }

    .poem-content {
        background-color: #fcfcfc;
        padding: 30px;
        border-radius: 12px;
        margin-bottom: 25px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.03);
    }

        .poem-content pre {
            font-family: 'Georgia', serif;
            font-size: 18px;
            line-height: 1.8;
            white-space: pre-wrap;
            margin: 0;
            color: var(--text-primary);
        }

    .poem-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 20px;
    }

    .tag {
        background-color: #f0f4f8;
        color: var(--text-secondary);
        padding: 5px 12px;
        border-radius: 15px;
        font-size: 13px;
        transition: var(--transition);
    }

        .tag:hover {
            background: var(--primary-gradient);
            color: white;
            transform: translateY(-2px);
        }

    /* Poem Footer */
    .poem-footer {
        padding: 20px 30px;
        background-color: #f8f9fa;
        border-top: 1px solid rgba(0,0,0,0.05);
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        gap: 20px;
    }

    .copyright-section {
        max-width: 60%;
    }

    .license {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 10px;
        font-weight: 500;
    }

        .license i {
            color: var(--blue-light);
        }

    .copyright-notice {
        font-size: 14px;
        color: var(--text-secondary);
        line-height: 1.4;
    }

    .poem-stats {
        display: flex;
        gap: 20px;
    }

    .stat {
        display: flex;
        align-items: center;
        gap: 8px;
        color: var(--text-secondary);
    }

        .stat i {
            color: var(--pink-light);
        }

    /* Delete Modal */
    .delete-warning {
        text-align: center;
        padding: 20px;
    }

        .delete-warning i {
            font-size: 48px;
            color: #dc3545;
            margin-bottom: 15px;
        }

    /* Responsive Adjustments */
    /* media (max-width: 992px) { */
    /*     .poem-header */

    /* { */
    /*     flex-direction: column; */
    /*     gap: 20px; */
    /* } */

    /* .cover-section { */
    /*     flex: 0 0 auto; */
    /*     width: 100%; */
    /*     max-width: 400px; */
    /*     margin: 0 auto; */
    /* } */

    /* } */

    /* media (max-width: 768px) { */
    /*     .poem-footer */

    /* { */
    /*     flex-direction: column; */
    /* } */

    /* .copyright-section { */
    /*     max-width: 100%; */
    /* } */

    /* .poem-stats { */
    /*     width: 100%; */
    /*     justify-content: space-between; */
    /* } */

    /* .poem-header, */
    /* .poem-content-wrapper, */
    /* .poem-footer { */
    /*     padding: 20px; */
    /* } */

    /* .poem-content { */
    /*     padding: 20px; */
    /* } */

    /* } */

    /* media (max-width: 576px) { */
    /*     .poem-actions */

    /* { */
    /*     flex-direction: column; */
    /*     align-items: flex-start; */
    /* } */

    /* .btn-group { */
    /*     width: 100%; */
    /* } */

    /* .action-btn { */
    /*     flex: 1; */
    /*     justify-content: center; */
    /* } */

    /* .poem-stats { */
    /*     flex-wrap: wrap; */
    /*     gap: 15px; */
    /* } */

    /* .stat { */
    /*     flex: 1 0 40%; */
    /* } */

    /* .meta-tag { */
    /*     flex-grow: 1; */
    /*     justify-content: center; */
    /* } */

    /* } */
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // You can add any JavaScript functionality here
        // For example, if you want to implement a read-time calculator
        const poemContent = document.querySelector('.poem-content pre').textContent;
        const wordCount = poemContent.split(/\s+/).filter(word => word.length > 0).length;
        const readingTime = Math.max(1, Math.ceil(wordCount / 150));

        // This could be used to display a reading time badge somewhere in your UI
        console.log(`Estimated reading time: ${readingTime} minute(s)`);
    });
</script>