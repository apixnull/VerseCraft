@model IEnumerable<VerseCraft.Models.Poem>

@{
    ViewData["Title"] = "Manage Poems";
}

<link rel="stylesheet" href="~/css/displayPoemAdmin.css" asp-append-version="true" />


<div class="container-fluid">
    <!-- Stats Cards -->
    <div class="stats-container">
        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-book-open text-primary"></i>
            </div>
            <div>
                <div class="stat-value">@Model.Count()</div>
                <div class="stat-label">Total Poems</div>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-check-circle text-success"></i>
            </div>
            <div>
                <div class="stat-value">@Model.Count(p => p.IsApproved)</div>
                <div class="stat-label">Approved Poems</div>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-globe text-info"></i>
            </div>
            <div>
                <div class="stat-value">@Model.Count(p => p.IsPublic)</div>
                <div class="stat-label">Public Poems</div>
            </div>
        </div>
    </div>
    <div class="filter-bar d-flex flex-wrap justify-content-between align-items-center">
        <div class="input-group search-container mb-2 mb-md-0">
            <input id="poemSearch" type="text" class="form-control" placeholder="Search by ID, title, theme...">
            <button id="searchBtn" class="btn btn-outline-secondary" type="button">
                <i class="bi bi-search"></i>
            </button>
        </div>
        <div class="d-flex">
            <a asp-action="CreatePoem" class="btn create-btn">
                <i class="bi bi-plus-lg me-1"></i> Create New Poem
            </a>
        </div>
    </div>

    <div id="noResults" class="my-4">
        <i class="bi bi-search" style="font-size: 3rem; color: #bbdefb;"></i>
        <h4 class="mt-3">No poems found</h4>
        <p class="text-muted">Try adjusting your search criteria</p>
    </div>

    <div class="poem-grid" id="poemContainer">
        @foreach (var poem in Model)
        {
            <div class="poem-card" data-id="@poem.Id" data-title="@poem.Title.ToLower()"
                 data-theme="@(poem.Theme?.ToLower() ?? "")" data-genre="@(poem.Genre?.ToLower() ?? "")"
                 data-author="@poem.AuthorName.ToLower()">
                <form asp-action="DeletePoem" asp-route-id="@poem.Id"
                      method="post" class="delete-form">
                    <button type="button" class="delete-btn delete-poem-btn" title="Delete">
                        <i class="fas fa-times"></i>
                    </button>
                </form>

                <div class="poem-header d-flex justify-content-between align-items-center">
                    <h5 class="m-0">#@poem.Id</h5>
                    <div class="status-group" style="margin-right: 30px;">
                        <!-- Added margin-right -->
                        <span class="status-badge @(poem.IsApproved ? "badge-approved" : "badge-pending")">
                            @(poem.IsApproved ? "Approved" : "Pending")
                        </span>
                        <span class="status-badge @(poem.IsPublic ? "badge-public" : "badge-private")">
                            @(poem.IsPublic ? "Public" : "Private")
                        </span>
                    </div>
                </div>

                <div class="poem-body">
                    <h5 class="poem-title">@poem.Title</h5>
                    <div class="poem-content">@poem.Content</div>

                    <div class="metadata">
                        @if (!string.IsNullOrEmpty(poem.Theme))
                        {
                            <div class="metadata-item">
                                <div class="metadata-label">Theme:</div>
                                <div class="metadata-value">@poem.Theme</div>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(poem.Genre))
                        {
                            <div class="metadata-item">
                                <div class="metadata-label">Genre:</div>
                                <div class="metadata-value">@poem.Genre</div>
                            </div>
                        }
                        <div class="metadata-item">
                            <div class="metadata-label">Author:</div>
                            <div class="metadata-value">@poem.AuthorName</div>
                        </div>
                        <div class="metadata-item">
                            <div class="metadata-label">Created:</div>
                            <div class="metadata-value">@poem.CreatedAt.ToString("MMM dd, yyyy")</div>
                        </div>
                    </div>
                </div>
                <div class="poem-footer d-flex justify-content-end">
                    <a asp-action="EditPoem" asp-route-id="@poem.Id" class="btn btn-outline-primary action-btn" title="Edit">
                        <i class="bi bi-pencil"></i>
                    </a>
                    <a asp-action="DisplaySpecificPoem" asp-route-id="@poem.Id" class="btn btn-outline-info action-btn" title="View details">
                        <i class="bi bi-eye"></i>
                    </a>
                    
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Enhanced search
            const searchInput = document.getElementById('poemSearch');
            const searchBtn = document.getElementById('searchBtn');
            const poemCards = document.querySelectorAll('.poem-card');
            const noResults = document.getElementById('noResults');
            const poemContainer = document.getElementById('poemContainer');

            function filterPoems() {
                const term = searchInput.value.trim().toLowerCase();
                let matchCount = 0;

                poemCards.forEach(card => {
                    const id = card.dataset.id;
                    const title = card.dataset.title;
                    const theme = card.dataset.theme;
                    const genre = card.dataset.genre;
                    const author = card.dataset.author;

                    const matches = !term ||
                        id.includes(term) ||
                        title.includes(term) ||
                        theme.includes(term) ||
                        genre.includes(term) ||
                        author.includes(term);

                    card.style.display = matches ? '' : 'none';
                    if (matches) matchCount++;
                });

                // Show/hide no results message
                noResults.style.display = matchCount === 0 ? 'block' : 'none';
                poemContainer.style.display = matchCount === 0 ? 'none' : 'grid';
            }

            searchInput.addEventListener('keyup', e => {
                if (e.key === 'Enter') filterPoems();
                // Auto-search after a brief pause in typing
                clearTimeout(searchInput.timer);
                searchInput.timer = setTimeout(filterPoems, 300);
            });

            searchBtn.addEventListener('click', filterPoems);
        });
    </script>
    <script>
        // Update delete confirmation script
        document.querySelectorAll('.delete-poem-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const form = this.closest('form');
                const poemTitle = this.closest('.poem-card').querySelector('.poem-title').textContent;

                Swal.fire({
                    title: 'Delete Poem?',
                    text: `Are you sure you want to delete "${poemTitle}"?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#ff8a8a',
                    cancelButtonColor: '#89b9e6',
                    confirmButtonText: 'Delete',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        form.submit();
                    }
                });
            });
        });
    </script>
}