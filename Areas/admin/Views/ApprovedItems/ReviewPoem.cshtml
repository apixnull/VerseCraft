@model VerseCraft.Models.Poem
@{
    ViewData["Title"] = "Review Poem";
}

<style>
    :root {
        --primary-gradient: linear-gradient(135deg, #f8e1e9 0%, #d4e5f7 100%);
        --accent-pink: #e999c0;
        --accent-blue: #89b9e6;
        --accent-blue-dark: #5a8fc9;
        --accent-pink-dark: #d47fa8;
        --text-dark: #333333;
        --text-light: #666666;
        --card-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        --border-radius: 12px;
    }

    .review-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #f0f0f0;
    }

    .page-title {
        display: flex;
        align-items: center;
        color: var(--text-dark);
        font-size: 1.75rem;
    }

        .page-title i {
            margin-right: 1rem;
            color: var(--accent-blue);
            font-size: 2rem;
        }

    .poem-card {
        background: white;
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        overflow: hidden;
        margin-bottom: 2rem;
    }

    .poem-header {
        background: linear-gradient(135deg, rgba(248, 187, 208, 0.5) 0%, rgba(187, 222, 251, 0.5) 100%);
        padding: 2rem;
        text-align: center;
        position: relative;
    }

    .poem-title {
        font-size: 2rem;
        font-weight: 700;
        margin: 0 0 0.5rem;
        color: var(--text-dark);
    }

    .poem-author {
        font-size: 1.1rem;
        color: var(--accent-blue-dark);
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .poem-content-container {
        padding: 2rem;
        background: rgba(255, 255, 255, 0.8);
        border-radius: var(--border-radius);
        margin: 1rem auto;
        max-width: 800px;
    }

    .poem-content {
        white-space: pre-wrap;
        font-family: 'Georgia', serif;
        font-size: 1.1rem;
        line-height: 1.8;
        color: var(--text-dark);
    }

    .poem-body {
        padding: 2rem;
    }

    .content-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    .content-section {
        background: white;
        border-radius: var(--border-radius);
        padding: 1.5rem;
        box-shadow: var(--card-shadow);
    }

    .section-title {
        font-size: 1.25rem;
        color: var(--accent-blue-dark);
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #f0f0f0;
        display: flex;
        align-items: center;
    }

        .section-title i {
            margin-right: 0.75rem;
            color: var(--accent-pink);
        }

    .metadata-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
    }

    .metadata-item {
        margin-bottom: 1rem;
    }

    .metadata-label {
        font-size: 0.875rem;
        color: var(--text-light);
        margin-bottom: 0.25rem;
        display: flex;
        align-items: center;
    }

        .metadata-label i {
            margin-right: 0.5rem;
            color: var(--accent-pink);
            font-size: 0.9rem;
        }

    .metadata-value {
        font-size: 1rem;
        color: var(--text-dark);
        font-weight: 500;
        padding: 0.5rem 0.75rem;
        background: rgba(137, 185, 230, 0.1);
        border-radius: 6px;
        word-break: break-word;
    }

    .required-field {
        color: #f44336;
        font-size: 0.75rem;
        margin-left: 0.5rem;
    }

    .status-badge {
        display: inline-flex;
        align-items: center;
        padding: 0.35rem 0.75rem;
        border-radius: 50px;
        font-size: 0.875rem;
        font-weight: 500;
    }

    .badge-approved {
        background: linear-gradient(135deg, #81c784, #4caf50);
        color: white;
    }

    .badge-pending {
        background: linear-gradient(135deg, #fff176, #ffd600);
        color: var(--text-dark);
    }

    .badge-rejected {
        background: linear-gradient(135deg, #ef9a9a, #f44336);
        color: white;
    }

    .badge-public {
        background: linear-gradient(135deg, #80deea, #00bcd4);
        color: white;
    }

    .badge-private {
        background: linear-gradient(135deg, #e0e0e0, #9e9e9e);
        color: white;
    }

    .action-buttons {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 2rem;
        padding-top: 2rem;
        border-top: 2px solid #f0f0f0;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .action-group {
        display: flex;
        gap: 1rem;
        align-items: center;
        flex-wrap: wrap;
    }

    .btn-back {
        background: white;
        color: var(--text-light);
        border: 1px solid #e0e0e0;
        padding: 0.75rem 1.5rem;
        border-radius: 50px;
        display: flex;
        align-items: center;
        transition: all 0.3s ease;
        text-decoration: none;
    }

        .btn-back:hover {
            background: #f5f5f5;
            color: var(--text-dark);
            text-decoration: none;
        }

        .btn-back i {
            margin-right: 0.5rem;
        }

    .btn-approve {
        background: linear-gradient(135deg, #81c784, #4caf50);
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 50px;
        display: flex;
        align-items: center;
        transition: all 0.3s ease;
        cursor: pointer;
    }

        .btn-approve:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(129, 199, 132, 0.3);
        }

        .btn-approve i {
            margin-right: 0.5rem;
        }

    .rejection-container {
        position: relative;
    }

    .btn-reject-toggle {
        background: linear-gradient(135deg, #ef9a9a, #f44336);
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 50px;
        display: flex;
        align-items: center;
        transition: all 0.3s ease;
        cursor: pointer;
    }

        .btn-reject-toggle:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(239, 154, 154, 0.3);
        }

        .btn-reject-toggle i {
            margin-right: 0.5rem;
        }

    .rejection-dropdown {
        position: absolute;
        right: 0;
        bottom: 100%;
        margin-bottom: 1rem;
        background: white;
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        padding: 1.5rem;
        width: 300px;
        z-index: 10;
        display: none;
    }

    .rejection-textarea {
        width: 100%;
        min-height: 120px;
        padding: 0.75rem;
        border: 1px solid #e0e0e0;
        border-radius: var(--border-radius);
        margin-bottom: 1rem;
        resize: vertical;
        transition: all 0.3s ease;
        font-family: inherit;
        font-size: 0.9rem;
    }

        .rejection-textarea:focus {
            border-color: var(--accent-blue);
            outline: none;
            box-shadow: 0 0 0 3px rgba(137, 185, 230, 0.2);
        }

    .rejection-actions {
        display: flex;
        justify-content: flex-end;
        gap: 0.75rem;
    }

    .btn-cancel {
        background: white;
        color: var(--text-light);
        border: 1px solid #e0e0e0;
        padding: 0.5rem 1rem;
        border-radius: 50px;
        transition: all 0.3s ease;
        cursor: pointer;
        font-size: 0.9rem;
    }

        .btn-cancel:hover {
            background: #f5f5f5;
            color: var(--text-dark);
        }

    .btn-confirm-reject {
        background: linear-gradient(135deg, #ef9a9a, #f44336);
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 50px;
        transition: all 0.3s ease;
        cursor: pointer;
        font-size: 0.9rem;
    }

        .btn-confirm-reject:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(239, 154, 154, 0.3);
        }

    .rejection-container.active .rejection-dropdown {
        display: block;
        animation: fadeIn 0.2s ease-out;
    }

    /* keyframes fadeIn { */
    /*     from { */
    /*         opacity: 0; */
    /*         transform: translateY(10px); */
    /*     } */

    /*     to { */
    /*         opacity: 1; */
    /*         transform: translateY(0); */
    /*     } */
    /* } */

    .image-preview {
        width: 100%;
        max-height: 300px;
        object-fit: contain;
        border-radius: var(--border-radius);
        margin-top: 1rem;
        box-shadow: var(--card-shadow);
        border: 1px solid #eee;
    }

    .empty-value {
        color: var(--text-light);
        font-style: italic;
    }

    .user-card {
        display: flex;
        align-items: center;
        padding: 0.75rem;
        background: rgba(137, 185, 230, 0.1);
        border-radius: var(--border-radius);
        margin-top: 0.5rem;
    }

    .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(135deg, #f8bbd0, #bbdefb);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        margin-right: 1rem;
    }

    .user-info {
        flex: 1;
    }

    .user-name {
        font-weight: 500;
        color: var(--text-dark);
        margin-bottom: 0.1rem;
    }

    .user-email {
        font-size: 0.8rem;
        color: var(--text-light);
    }

    .no-owner {
        color: var(--text-light);
        font-style: italic;
    }

    .anthology-count {
        display: inline-flex;
        align-items: center;
        padding: 0.25rem 0.75rem;
        background: rgba(137, 185, 230, 0.1);
        border-radius: 50px;
        font-size: 0.875rem;
        color: var(--accent-blue-dark);
    }

    .anthology-list {
        max-height: 200px;
        overflow-y: auto;
        padding: 0.5rem;
        background: rgba(255, 255, 255, 0.7);
        border-radius: var(--border-radius);
        margin-top: 0.5rem;
    }

        .anthology-list ul {
            margin: 0;
            padding-left: 1.2rem;
            list-style-type: none;
        }

        .anthology-list li {
            padding: 0.5rem 0;
            border-bottom: 1px solid #f0f0f0;
            display: flex;
            align-items: center;
        }

            .anthology-list li:last-child {
                border-bottom: none;
            }

            .anthology-list li i {
                margin-right: 0.5rem;
                color: var(--accent-blue);
            }
</style>

<div class="review-container">
    <div class="page-header">
        <h1 class="page-title">
            <i class="fas fa-scroll"></i>Review Poem
        </h1>
    </div>

    <div class="poem-card">
        <div class="poem-header">
            <h2 class="poem-title">
                @Model.Title
                @if (string.IsNullOrEmpty(Model.Title))
                {
                    <span class="required-field">(Required)</span>
                }
            </h2>
            <div class="poem-author">
                <i class="fas fa-user-edit"></i> @(string.IsNullOrEmpty(Model.AuthorName) ? "Unknown Author" : Model.AuthorName)
                @if (Model.AnthologyPoems != null && Model.AnthologyPoems.Any())
                {
                    <span class="anthology-count">
                        <i class="fas fa-book"></i>
                        @Model.AnthologyPoems.Count anthology@(Model.AnthologyPoems.Count != 1 ? "ies" : "")
                    </span>
                }
            </div>
        </div>

        <div class="poem-body">
            <!-- Poem Content -->
            <div class="poem-content-container">
                <div class="poem-content">
                    @if (string.IsNullOrEmpty(Model.Content))
                    {
                        <span class="empty-value">No content provided</span>
                        <span class="required-field">(Required)</span>
                    }
                    else
                    {
                        @Model.Content
                    }
                </div>
            </div>

            <div class="content-grid">
                <!-- Cover Image Section -->
                @if (!string.IsNullOrEmpty(Model.CoverImagePath))
                {
                    <div class="content-section">
                        <h3 class="section-title">
                            <i class="fas fa-image"></i> Cover Image
                        </h3>
                        <div class="metadata-value">@Model.CoverImagePath</div>
                        <img src="@Model.CoverImagePath" alt="Poem cover" class="image-preview" onerror="this.style.display='none'">
                    </div>
                }

                <!-- Ownership Section -->
                <div class="content-section">
                    <h3 class="section-title">
                        <i class="fas fa-user-tag"></i> Ownership
                    </h3>
                    <div class="metadata-item">
                        <div class="metadata-label">
                            <i class="fas fa-id-card"></i> Owner
                        </div>
                        @if (Model.User != null)
                        {
                            <div class="user-card">
                                <div class="user-avatar">
                                    @(Model.User.Name?.Substring(0, 1).ToUpper() ?? Model.User.Email.Substring(0, 1).ToUpper())
                                </div>
                                <div class="user-info">
                                    <div class="user-name">@Model.User.Name ?? "Unnamed User"</div>
                                    <div class="user-email">@Model.User.Email</div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="metadata-value no-owner">
                                No owner assigned
                            </div>
                        }
                    </div>
                    <div class="metadata-item">
                        <div class="metadata-label">
                            <i class="fas fa-id-badge"></i> User ID
                        </div>
                        <div class="metadata-value">
                            <span class="empty-value"> @(Model.UserId?.ToString() ?? "Not assigned") </span>
                        </div>
                    </div>
                </div>

                <!-- Poem Details Section -->
                <div class="content-section">
                    <h3 class="section-title">
                        <i class="fas fa-info-circle"></i> Poem Details
                    </h3>
                    <div class="metadata-grid">
                        <div class="metadata-item">
                            <div class="metadata-label">
                                <i class="fas fa-book-open"></i> Summary
                            </div>
                            <div class="metadata-value">
                                @if (string.IsNullOrEmpty(Model.Summary))
                                {
                                    <span class="empty-value">Not provided</span>
                                }
                                else
                                {
                                    @Model.Summary
                                }
                            </div>
                        </div>
                        <div class="metadata-item">
                            <div class="metadata-label">
                                <i class="fas fa-tags"></i> Genre
                            </div>
                            <div class="metadata-value">
                                @if (string.IsNullOrEmpty(Model.Genre))
                                {
                                    <span class="empty-value">Not specified</span>
                                }
                                else
                                {
                                    @Model.Genre
                                }
                            </div>
                        </div>
                        <div class="metadata-item">
                            <div class="metadata-label">
                                <i class="fas fa-paint-brush"></i> Style
                            </div>
                            <div class="metadata-value">
                                @if (string.IsNullOrEmpty(Model.Style))
                                {
                                    <span class="empty-value">Not specified</span>
                                }
                                else
                                {
                                    @Model.Style
                                }
                            </div>
                        </div>
                        <div class="metadata-item">
                            <div class="metadata-label">
                                <i class="fas fa-lightbulb"></i> Theme
                            </div>
                            <div class="metadata-value">
                                @if (string.IsNullOrEmpty(Model.Theme))
                                {
                                    <span class="empty-value">Not specified</span>
                                }
                                else
                                {
                                    @Model.Theme
                                }
                            </div>
                        </div>
                        <div class="metadata-item">
                            <div class="metadata-label">
                                <i class="fas fa-tag"></i> Tags
                            </div>
                            <div class="metadata-value">
                                @if (string.IsNullOrEmpty(Model.Tags))
                                {
                                    <span class="empty-value">Not specified</span>
                                }
                                else
                                {
                                    @Model.Tags
                                }
                            </div>
                        </div>
                        <div class="metadata-item">
                            <div class="metadata-label">
                                <i class="fas fa-language"></i> Language
                            </div>
                            <div class="metadata-value">
                                @if (string.IsNullOrEmpty(Model.Language))
                                {
                                    <span class="empty-value">Not specified</span>
                                }
                                else
                                {
                                    @Model.Language
                                }
                            </div>
                        </div>
                        <div class="metadata-item">
                            <div class="metadata-label">
                                <i class="fas fa-smile"></i> Mood
                            </div>
                            <div class="metadata-value">
                                @if (string.IsNullOrEmpty(Model.Mood))
                                {
                                    <span class="empty-value">Not specified</span>
                                }
                                else
                                {
                                    @Model.Mood
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Legal Information Section -->
                <div class="content-section">
                    <h3 class="section-title">
                        <i class="fas fa-balance-scale"></i> Legal Information
                    </h3>
                    <div class="metadata-grid">
                        <div class="metadata-item">
                            <div class="metadata-label">
                                <i class="fas fa-file-contract"></i> License Type
                            </div>
                            <div class="metadata-value">
                                @if (string.IsNullOrEmpty(Model.LicenseType))
                                {
                                    <span class="empty-value">Not specified</span>
                                }
                                else
                                {
                                    @Model.LicenseType
                                }
                            </div>
                        </div>
                        <div class="metadata-item">
                            <div class="metadata-label">
                                <i class="fas fa-copyright"></i> Copyright Notice
                            </div>
                            <div class="metadata-value">
                                @if (string.IsNullOrEmpty(Model.CopyrightNotice))
                                {
                                    <span class="empty-value">Not specified</span>
                                }
                                else
                                {
                                    @Model.CopyrightNotice
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Status Section -->
                <div class="content-section">
                    <h3 class="section-title">
                        <i class="fas fa-tags"></i> Status
                    </h3>
                    <div class="metadata-grid">
                        <div class="metadata-item">
                            <div class="metadata-label">
                                <i class="fas fa-eye"></i> Visibility
                            </div>
                            <span class="status-badge @(Model.IsPublic ? "badge-public" : "badge-private")">
                                @(Model.IsPublic ? "Public" : "Private")
                            </span>
                        </div>
                        <div class="metadata-item">
                            <div class="metadata-label">
                                <i class="fas fa-check-circle"></i> Approval
                            </div>
                            <span class="status-badge @(Model.IsApproved ? "badge-approved" : "badge-pending")">
                                @(Model.IsApproved ? "Approved" : "Pending")
                            </span>
                        </div>
                    </div>
                </div>

                <!-- Metadata Section -->
                <div class="content-section">
                    <h3 class="section-title">
                        <i class="fas fa-database"></i> Metadata
                    </h3>
                    <div class="metadata-grid">
                        <div class="metadata-item">
                            <div class="metadata-label">
                                <i class="fas fa-calendar-plus"></i> Created
                            </div>
                            <div class="metadata-value">
                                @Model.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")
                            </div>
                        </div>
                        <div class="metadata-item">
                            <div class="metadata-label">
                                <i class="fas fa-calendar-check"></i> Updated
                            </div>
                            <div class="metadata-value">
                                @(Model.UpdatedAt?.ToString("yyyy-MM-dd HH:mm:ss") ?? "<span class=\"empty-value\">Never updated</span>")
                            </div>
                        </div>
                        <div class="metadata-item">
                            <div class="metadata-label">
                                <i class="fas fa-hashtag"></i> Poem ID
                            </div>
                            <div class="metadata-value">
                                @Model.Id
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Anthologies Section -->
                <div class="content-section">
                    <h3 class="section-title">
                        <i class="fas fa-book"></i> Included in Anthologies (@(Model.AnthologyPoems?.Count ?? 0))
                    </h3>
                    <div class="metadata-item">
                        @if (Model.AnthologyPoems != null && Model.AnthologyPoems.Any())
                        {
                            <div class="anthology-list">
                                <ul>
                                    @foreach (var anthologyPoem in Model.AnthologyPoems)
                                    {
                                        <li>
                                            <i class="fas fa-book"></i>
                                            @anthologyPoem.Anthology?.Title
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                        else
                        {
                            <div class="metadata-value empty-value">
                                Not included in any anthologies
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Action Buttons Section -->
            <div class="action-buttons">
                <a asp-action="PendingApprovals" class="btn-back">
                    <i class="fas fa-arrow-left"></i> Back to List
                </a>

                <div class="action-group">
                    <form asp-action="ApprovePoem" method="post" class="approve-form">
                        <input type="hidden" name="id" value="@Model.Id" />
                        <button type="submit" class="btn-approve">
                            <i class="fas fa-check"></i> Approve
                        </button>
                    </form>

                    <div class="rejection-container">
                        <button type="button" class="btn-reject-toggle">
                            <i class="fas fa-times"></i> Reject
                        </button>
                        <div class="rejection-dropdown">
                            <form asp-action="RejectPoem" method="post" class="reject-form" id="rejectPoemForm">
                                <input type="hidden" name="id" value="@Model.Id" />
                                <label for="rejectionReason" style="display: block; margin-bottom: 0.5rem; color: var(--text-light); font-size: 0.9rem;">
                                    Rejection reason (optional):
                                </label>
                                <textarea id="rejectionReason"
                                          name="rejectionReason"
                                          placeholder="Please provide a reason for rejection (optional)..."
                                          class="rejection-textarea"></textarea>
                                <div class="rejection-actions">
                                    <button type="button" class="btn-cancel">Cancel</button>
                                    <button type="submit" class="btn-confirm-reject">Confirm Rejection</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Add SweetAlert CDN -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Toggle rejection dropdown
            const rejectToggle = document.querySelector('.btn-reject-toggle');
            const rejectionContainer = document.querySelector('.rejection-container');

            rejectToggle.addEventListener('click', function(e) {
                e.stopPropagation();
                rejectionContainer.classList.toggle('active');
            });

            // Cancel button
            document.querySelector('.btn-cancel')?.addEventListener('click', function() {
                rejectionContainer.classList.remove('active');
            });

            // Handle form submission
            const rejectPoemForm = document.getElementById('rejectPoemForm');
            if (rejectPoemForm) {
                rejectPoemForm.addEventListener('submit', function(e) {
                    e.preventDefault();

                    const formData = new FormData(rejectPoemForm);
                    const rejectionReason = formData.get('rejectionReason') || 'No reason provided';

                    Swal.fire({
                        title: 'Confirm Poem Rejection',
                        html: `Are you sure you want to reject this poem?<br><br>
                              <strong>Reason:</strong> ${rejectionReason || 'No reason provided'}`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Yes, reject it!',
                        cancelButtonText: 'Cancel',
                        reverseButtons: true
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Submit the form if confirmed
                            rejectPoemForm.submit();
                        }
                    });
                });
            }

            // Confirm approval
            document.querySelector('.btn-approve')?.addEventListener('click', function(e) {
                e.preventDefault();

                Swal.fire({
                    title: 'Confirm Poem Approval',
                    text: 'Are you sure you want to approve this poem?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#4caf50',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, approve it!',
                    cancelButtonText: 'Cancel',
                    reverseButtons: true
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Submit the form if confirmed
                        this.closest('form').submit();
                    }
                });
            });

            // Close dropdown when clicking outside
            document.addEventListener('click', function(e) {
                if (!rejectionContainer.contains(e.target) && e.target !== rejectToggle) {
                    rejectionContainer.classList.remove('active');
                }
            });
        });
    </script>
}